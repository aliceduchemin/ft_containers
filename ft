########## VECTOR TESTS : ##########




########## STACK TESTS : ##########




########## MAP TESTS : ##########

Creating a map, NMSPC::make_pair, inserting elements with insert and [] :
Values inserted : [f][10], [a][9], [b][3], [z][1], [c][7], [y][6], [s][79]

Adding via operator[], checking the return value :
map[r] = 0
retour [u] : 567
retour [c] : 8
retour [y] : 6
retour [u] : 41
retour [b] : 60
Values inserted : [r]X, [u][567], [c][8], [y][6], [u][41], [b][60]
Map size : 9

Changing value of already existing key with operator[] ([b][78])
Trying to insert already existing key ([a][18])
Map size : 9
Print map : 
a :: 9 ; b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; y :: 6 ; z :: 1 ; 

---------------------------- 
begin() and end() :
map.begin() = a :: 9
map.end() - 1 = z :: 1

---------------------------- 
Find elements, existing and not :
s found
k not found

---------------------------- 
Insert range (from 2nd to last elem of map in new map (map2)) :
Printing new map (map2) : 
b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; y :: 6 ; z :: 1 ; 

---------------------------- 
Insert value at position ([x][99] at last position) :
Printing map2 : 
b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; x :: 99 ; y :: 6 ; z :: 1 ; 

---------------------------- 
Copy constructor :
Printing new map (map3) : 
b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; x :: 99 ; y :: 6 ; z :: 1 ; 

---------------------------- 
Operator = :
Printing new map (map4) : 
b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; x :: 99 ; y :: 6 ; z :: 1 ; 

---------------------------- 
Erase tests : 
Erase iterator position (2nd element)
Printing partially erased map (map2) : 
b :: 78 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; x :: 99 ; y :: 6 ; z :: 1 ; 

Erase key (y and z)
Printing partially erased map (map2) : 
b :: 78 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; x :: 99 ; 

Erase range (2nd to 4th element)
Start of iterator erase : f
End of iterator erase : x
Printing partially erased map (map2) : 
b :: 78 ; x :: 99 ; 

---------------------------- 
Swaping maps map and map2: 
Printing map before swap : 
a :: 9 ; b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; y :: 6 ; z :: 1 ; 
Printing map2 before swap : 
b :: 78 ; x :: 99 ; 
Swap
Checking validity of iterators and pointers after the swap : 
itbis == myMap2.begin() ? 1
it2bis == myMap.begin() ? 1
Printing map : 
b :: 78 ; x :: 99 ; 
Printing map2 : 
a :: 9 ; b :: 78 ; c :: 8 ; f :: 10 ; r :: 0 ; s :: 79 ; u :: 41 ; y :: 6 ; z :: 1 ; 

---------------------------- 
Count : 
count b : 1

---------------------------- 
Key_comp() :
a => 100
b => 200
c => 300

Value_comp() :
a => 100
b => 200
c => 300

---------------------------- 
Bounds & equal_range : 
return lower_bound for s = x
return upper_bound for s = x
return equal_range for s = x

---------------------------- 
Clear, empty, size and max_size :
map2 empty ? 0
size of map2 ? 9
Clear map2
map2 empty ? 1
size of map2 ? 0
Printing map2 : 

Max size = 128102389400760775

---------------------------- 
Const and reverse iterators : 
Const iterators : 
const begin() : b :: 78
find const it = b

Create <const int, std::string> map and const_iterate on it :
[1248765][SCHNELL] | [183648][bonjour ici] | [87][bilbo] | [1][hello there] | [-8][michel] | [-9][bonjour] | 

Reverse iterators on map3 : 
reverse begin() : z :: 1
 z : 1 -  y : 6 -  x : 99 -  u : 41 -  s : 79 -  r : 0 -  f : 10 -  c : 8 -  b : 78 - 

Const reverse iterators : 
const reverse begin() : 1248765 :: SCHNELL
[1248765][SCHNELL] | [183648][bonjour ici] | [87][bilbo] | [1][hello there] | [-8][michel] | [-9][bonjour] | [-2147483648][bonjour ici] | 


Duration : 0.000618 seconds
